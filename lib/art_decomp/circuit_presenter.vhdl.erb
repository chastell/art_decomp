library ieee;
use ieee.numeric_std.all;
use ieee.std_logic_1164.all;

entity <%= name %> is
  port(
        reset: in  std_logic;
        clock: in  std_logic;
        fsm_ins: in  std_logic_vector(0 to <%= ins.binwidth - 1 %>);
        fsm_outs: out std_logic_vector(0 to <%= outs.binwidth - 1 %>)
      );
end <%= name %>;

architecture behaviour of <%= name %> is
  signal fsm_states, fsm_next_states: std_logic_vector(0 to <%= states.binwidth - 1 %>);

% functions.each.with_index do |fun, i|
  signal f<%= i %>_ins: std_logic_vector(0 to <%= fun.ins.binwidth - 1 %>);
  signal f<%= i %>_outs: std_logic_vector(0 to <%= fun.outs.binwidth - 1 %>);
% end
% recoders.each.with_index do |rec, i|
  signal r<%= i %>_ins: std_logic_vector(0 to <%= rec.ins.binwidth - 1 %>);
  signal r<%= i %>_outs: std_logic_vector(0 to <%= rec.outs.binwidth - 1 %>);
% end

begin
% wire_labels.each do |src_label, dst_label|
  <%= dst_label %> <= <%= src_label %>;
% end

  process(reset, clock) begin
    if reset = '1' then fsm_states <= "<%= '0' * states.binwidth %>";
    elsif rising_edge(clock) then fsm_states <= fsm_next_states;
    end if;
  end process;

% functions.each.with_index do |fun, i|
  f<%= i %>: process(f<%= i %>_ins) begin
    f<%= i %>_outs <= (others => '-');
% fun.rows.each.with_index do |(input, output), rownum|
    <%= rownum.zero? ? 'if' : 'elsif' %> std_match(f<%= i %>_ins, "<%= input %>") then f<%= i %>_outs <= "<%= output %>";
% end
    end if;
  end process;
% end
end behaviour;
