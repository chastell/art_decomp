library ieee;
use ieee.numeric_std.all;
use ieee.std_logic_1164.all;

entity <%= name %> is
  port(
        reset: in  std_logic;
        clock: in  std_logic;
        fsm_is: in  std_logic_vector(0 to <%= fsm_is_binwidth - 1 %>);
        fsm_os: out std_logic_vector(0 to <%= fsm_os_binwidth - 1 %>)
      );
end <%= name %>;

architecture behaviour of <%= name %> is
  signal fsm_qs, fsm_ps: std_logic_vector(0 to <%= fsm_qs_binwidth - 1 %>);

% functions.each.with_index do |fun, i|
  signal f<%= i %>_is: std_logic_vector(0 to <%= fun.is.binwidths.reduce(:+) - 1 %>);
  signal f<%= i %>_os: std_logic_vector(0 to <%= fun.os.binwidths.reduce(:+) - 1 %>);
% end
% recoders.each.with_index do |rec, i|
  signal r<%= i %>_is: std_logic_vector(0 to <%= rec.is.binwidths.reduce(:+) - 1 %>);
  signal r<%= i %>_os: std_logic_vector(0 to <%= rec.os.binwidths.reduce(:+) - 1 %>);
% end

begin
% wires.each do |source, destination|
  <%= destination %> <= <%= source %>;
% end

  process(reset, clock) begin
    if reset = '1' then fsm_qs <= "<%= reset_bits %>";
    elsif rising_edge(clock) then fsm_qs <= fsm_ps;
    end if;
  end process;

% functions.each.with_index do |fun, i|
  f<%= i %>: process(f<%= i %>_is) begin
    f<%= i %>_os <= (others => '-');
% fun.rows.each.with_index do |(input, output), rownum|
    <%= rownum.zero? ? 'if' : 'elsif' %> std_match(f<%= i %>_is, "<%= input %>") then f<%= i %>_os <= "<%= output %>";
% end
    end if;
  end process;
% end
end behaviour;
